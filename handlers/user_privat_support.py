
from aiogram import F, types,  Router
from aiogram.filters import CommandStart, Command, or_f


from common.contacts_list import contact_shipping, contact_consult, contact_assembling, contact_cashier
from filters.chat_types import ChatTypeFilter
from sqlalchemy.ext.asyncio import AsyncSession, async_sessionmaker, create_async_engine

from kbds import reply
from kbds import reply_custom
from database.orm_query import orm_get_products, orm_get_products_all, orm_get_category


user_privat_router_support = Router()
user_privat_router_support.message.filter(ChatTypeFilter(['private']))

@user_privat_router_support.message(F.text.lower().contains('–∫–∞—Ç–∞–ª–æ–≥ –¥–≤–µ—Ä–µ–π'))
async def category_doors(message : types.Message):
    await message.answer('–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é', reply_markup=reply_custom.category_doors_kb)  


@user_privat_router_support.message(or_f(
                                        (F.text == '–í–Ω—É—Ç—Ä—ñ—à–Ω—ñ –¥–≤–µ—Ä—ñ'),
                                        (F.text == '–ó–æ–≤–Ω—ñ—à–Ω—ñ –¥–≤–µ—Ä—ñ'),
                                         ))

async def catalog_cmd(message : types.Message, session: AsyncSession):

    if message.text == '–í–Ω—É—Ç—Ä—ñ—à–Ω—ñ –¥–≤–µ—Ä—ñ':    
        category_id = 1
    elif message.text == '–ó–æ–≤–Ω—ñ—à–Ω—ñ –¥–≤–µ—Ä—ñ':
        category_id = 2

    for product in await orm_get_products(session, int(category_id)):
        current_category_id = product.category_id
        category = await orm_get_category(session, int(current_category_id))
        await message.answer_photo(
            product.image,
            caption=f"<strong>{product.name}\n</strong>\n \
                –ö–æ–¥: {product.kode}\n \
                –ö–∞—Ç–µ–≥–æ—Ä—ñ—è : {category.name}\n \
                {product.description}\n \
                –¶—ñ–Ω–∞: {round(product.price, 2)}")

#-----------------------------------------------------------------------------------------------------
# async def catalog_cmd(message : types.Message, session: AsyncSession):
#     for product in await orm_get_products_all(session):
#         await message.answer_photo(
#             product.image,
#             caption=f"<strong>{product.name}\n</strong>\n \
#                 –ö–æ–¥: {product.kode}\n \
#                 {product.description}\n \
#                 –¶—ñ–Ω–∞: {round(product.price, 2)}")
        
#------------------------------------------------------------------------------------------------------    


#-------------------------------------------------------------------------------- –ö–∞—Ç–∞–ª–æ–≥ –≤—Å—ñ—Ö –¥–≤–µ—Ä–µ–π
# @user_privat_router_support.message(F.text.lower().contains('–∫–∞—Ç–∞–ª–æ–≥'))
# @user_privat_router_support.message(Command('catalog'))
# async def catalog_cmd(message : types.Message, session: AsyncSession):
#     for product in await orm_get_products_all(session):
#         await message.answer_photo(
#             product.image,
#             caption=f"<strong>{product.name}\n</strong>\n \
#                 –ö–æ–¥: {product.kode}\n \
#                 {product.description}\n \
#                 –¶—ñ–Ω–∞: {round(product.price, 2)}")

#--------------------------------------------------------------------------------
@user_privat_router_support.message(or_f(Command('utk'),
                                        (F.text.lower().contains('—Ç–µ–ø–ª–æ')),
                                        (F.text.lower().contains('–≤–æ–¥–∞')),
                                        (F.text.lower().contains('–≤–µ–Ω—Ç–∏–ª—è')),
                                        (F.text.lower().contains('–µ–ª–µ–∫—Ç—Ä–∏–∫')),
                                        (F.text.lower().contains('–ø—Ä–æ–≤–æ–¥')),
                                        (F.text.lower().contains('–ø—Ä–æ–≤—ñ–¥')),
                                        (F.text.lower().contains('–∫–∞–±–µ–ª')),
                                        (F.text.lower().contains('–Ω–∞—Å–æ—Å')),
                                        (F.text.lower().contains('–∫–æ—Ç–ª')),
                                         ))
async def utk_cmd(message : types.Message):
    await message.answer('–í—ñ—Ç–∞—î–º–æ –≤–∞—Å –≤ –£–¢–ö', reply_markup=reply_custom.utk2_kb.as_markup(
                                                        resize_keyboard=True,
                                                        input_field_placeholder='–©–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å'
                                                        ))   


@user_privat_router_support.message(or_f(Command('doors'),
                                        (F.text.lower().contains('–¥–≤–µ—Ä')),
                                        (F.text.lower().contains('—à–ø–∞–ª–µ—Ä')),
                                        (F.text.lower().contains('–æ–±–æ–∏')),
                                        (F.text.lower().contains('–º–∞—Ä–∫–µ—Ç –¥–≤–µ—Ä–µ–π')),
                                        
                                         ))
async def doors_cmd(message : types.Message):
    await message.answer('–í—ñ—Ç–∞—î–º–æ –≤–∞—Å –≤ –ú–∞—Ä–∫–µ—Ç—ñ –î–≤–µ—Ä–µ–π', reply_markup=reply_custom.start_kb)

@user_privat_router_support.message(F.text.lower().contains('–≤–∏—Ö—ñ–¥'))
@user_privat_router_support.message(Command('exit'))
async def exit_cmd(message : types.Message):
    await message.answer('–î–æ –Ω–æ–≤–∏—Ö –∑—É—Å—Ç—Ä—ñ—á–µ–π üñêÔ∏è', reply_markup=reply_custom.del_kbd)    



 



@user_privat_router_support.message(F.text.lower().contains('—Ä–µ–∑–µ—Ä–≤')) # ----------------- contains - —à—É–∫–∞—î –∑–±—ñ–≥–∏ —É —Ç–µ–∫—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
async def filter_text_custom_two(message : types.Message):
    await message.answer(f'–í—ñ—Ç–∞—î–º–æ.\n {message.from_user.first_name}\n –∑ –ø—Ä–∏–≤–æ–¥—É —Ä–µ–∑–µ—Ä–≤—É \n –≤–∏ –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∑–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º :\n {contact_consult}') 



@user_privat_router_support.message(F.text.lower().contains('–∫–æ–Ω—Å—É–ª—å—Ç')) # ----------------- contains - —à—É–∫–∞—î –∑–±—ñ–≥–∏ —É —Ç–µ–∫—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
async def filter_text_custom_three(message : types.Message):
    await message.answer(f'–í—ñ—Ç–∞—î–º–æ.\n {message.from_user.first_name}\n –º–æ–∂–µ–º–æ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç—É–≤–∞—Ç–∏ –≤–∞—Å \n –∑–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º :\n {contact_consult}')

@user_privat_router_support.message(F.text.lower().contains('–∑–∞–º–æ–≤')) # ----------------- contains - —à—É–∫–∞—î –∑–±—ñ–≥–∏ —É —Ç–µ–∫—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
async def filter_text_custom_four(message : types.Message):
    await message.answer(f'–í—ñ—Ç–∞—î–º–æ.\n {message.from_user.first_name}\n –∑–¥—ñ–π—Å–Ω–∏—Ç–∏ –∑–∞–º–æ–ª–µ–Ω–Ω—è –≤–∏ –º–æ–∂–µ—Ç–µ \n –∑–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º :\n {contact_consult}')    

@user_privat_router_support.message(F.text.lower().contains('–º–æ–Ω—Ç–∞–∂')) # ----------------- contains - —à—É–∫–∞—î –∑–±—ñ–≥–∏ —É —Ç–µ–∫—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
async def filter_text_custom_five(message : types.Message):
    await message.answer(f'–í—ñ—Ç–∞—î–º–æ.\n {message.from_user.first_name}\n –∑–∞–º–æ–≤–∏—Ç–∏ –º–æ–Ω—Ç–∞–∂  –≤–∏ –º–æ–∂–µ—Ç–µ \n –∑–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º :\n {contact_assembling}')

@user_privat_router_support.message(F.text.lower().contains('—Ä–æ–∑—Ä–∞—Ö')) # ----------------- contains - —à—É–∫–∞—î –∑–±—ñ–≥–∏ —É —Ç–µ–∫—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
async def filter_text_custom_six(message : types.Message):
    await message.answer(f'–í—ñ—Ç–∞—î–º–æ.\n {message.from_user.first_name}\n –∑–¥—ñ–π—Å–Ω–∏—Ç–∏ –æ–ø–ª–∞—Ç—É –≤–∏ –º–æ–∂–µ—Ç–µ \n –∑–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º :\n {contact_cashier}') 

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------

@user_privat_router_support.message(F.contact) #----------------------- –ª–æ–≤–∏–º–æ –∫–æ–Ω—Ç–∞–∫—Ç
async def get_contact(message: types.Message):
    await message.answer(f'–ö–æ–Ω—Ç–∞–∫—Ç –æ—Ç—Ä–∏–º–∞–Ω–æ :\n{str(message.contact)}')
    await message.answer(f' –Ω–æ–º–µ—Ä –æ—Ç—Ä–∏–º–∞–Ω–æ :\n{str(message.contact.phone_number)}')

@user_privat_router_support.message(F.location)#----------------------- –ª–æ–≤–∏–º–æ  –ª–æ–∫–∞—Ü—ñ—é
async def get_location(message: types.Message):
    await message.answer(f'–ª–æ–∫–∞—Ü—ñ—é –æ—Ç—Ä–∏–º–∞–Ω–æ {str(message.location)}')  



