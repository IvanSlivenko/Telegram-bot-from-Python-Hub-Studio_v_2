
from aiogram import F, types,  Router
from aiogram.filters import CommandStart, Command, or_f
from aiogram.utils.formatting import as_list, as_marked_section, Bold
from sqlalchemy.ext.asyncio import AsyncSession, async_sessionmaker, create_async_engine


from common.contacts_list import contact_shipping
from filters.chat_types import ChatTypeFilter
from handlers.menu_processing import get_menu_content
from database.orm_query import orm_add_user, orm_add_to_cart, orm_get_product


from kbds import reply
from kbds import reply_custom

from kbds.reply import get_keyboard
from kbds.inline import get_callback_btns, MenuCallBack


user_privat_router = Router()
user_privat_router.message.filter(ChatTypeFilter(['private']))


#------------------------------------------------------------- test 1
@user_privat_router.message(F.text == 'test')
async def test_cmd(mesage:types.Message):
    await mesage.answer('–¢—É—Ç –º–∏ —Ç–µ—Å—Ç—É—î–º–æ –Ω–æ–≤—É —Ñ—É–Ω–∫—Ü—ñ—é', reply_markup=get_callback_btns(btns={
                                                    '–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –º–µ–Ω–µ ': 'test_1'
                                                    }))
    
@user_privat_router.callback_query(F.data.startswith('test_'))
async def test_counter(callback: types.CallbackQuery):
    number = int(callback.data.split("_")[-1])

    await callback.message.edit_text(
        text=f"–ù–∞—Ç–∏—Å–Ω—É—Ç–∏–π - {number}",
        reply_markup=get_callback_btns(btns={
                                     '–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å —â–µ —Ä–∞–∑': f'test_{number+1}',

                                     }))
    




#-------------------------------------------------------------- test 1

#-------------------------------------------------------------–ö–æ–º–∞–Ω–¥–∞ /sectors
@user_privat_router.message(
        or_f(
            Command('sectors'), 
            (F.text.lower().contains('—Å–µ–∫—Ç–æ—Ä')),
            (F.text.lower().contains('–≤—ñ–¥–¥—ñ–ª')),
            (F.text.lower().contains('–ø—ñ–¥—Ä–æ–∑–¥—ñ–ª')),
            (F.text.lower().contains('–±—É–¥–º–∞—Ç–µ—Ä—ñ–∞–ª–∏')),
            )
        )
async def sectors_cmd(message: types.Message):
    await message.answer(f'–ü—Ä–∏–≤—ñ—Ç.  {message.from_user.first_name}.  –í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ñ —Ç–∞–∫—ñ –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª–∏',
                         reply_markup=get_keyboard(
                                                    '–ü–æ–∫—Ä—ñ–≤–ª—è —Ç–∞ —Ñ–∞—Å–∞–¥ üè†',    
                                                    '–ë—É–¥ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏ üèòÔ∏è',
                                                    '–£–º–∞–Ω—å –¢–µ–ø–ª–æ –ö–æ–º—Ñ–æ—Ä—Ç üö∞',
                                                    '–í—ñ–∫–Ω–∞ üå¨Ô∏è',
                                                    '–î–≤–µ—Ä—ñ üö™',
                                                    placeholder='–û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª',
                                                    sizes=(1,2,2)                          
                                                    ),

                        )


#------------------------------------------------------------ –ö–æ–º–∞–Ω–¥–∞ /start
@user_privat_router.message(CommandStart())
@user_privat_router.message(
        or_f( 
            (F.text.lower().contains('–¥–∏–≤–∏—Ç–∏—Å—å')),
            )
        )
async def start_cmd(message : types.Message, session: AsyncSession):
    media, reply_markup = await get_menu_content(session, level=0, menu_name="main")
    
    await message.answer_photo(media.media, caption=media.caption, reply_markup=reply_markup)

#----------------------------------------------Cart
async def add_to_cart(callback: types.CallbackQuery, callback_data: MenuCallBack, session: AsyncSession):

    current_product_id=callback_data.product_id
    current_product = await orm_get_product(session, int(current_product_id))
    
    # user = callback.from_user
    current_user_id=int(callback.from_user.id)
    
    await orm_add_user(
        session,
        user_id=current_user_id,
        first_name=callback.from_user.first_name,
        last_name=callback.from_user.last_name,
        phone=None,
    )


    await orm_add_to_cart(session, user_id=current_user_id, product_id=callback_data.product_id)
    await callback.answer(f"–¢–æ–≤–∞—Ä : '{current_product.name}' –¥–æ–¥–∞–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É", show_alert=True)
    # await callback.answer(f"–¢–æ–≤–∞—Ä {current_product.name} –¥–æ–¥–∞–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É")

#--------------------------------------------------------------------------
 

@user_privat_router.callback_query(MenuCallBack.filter())
async def user_menu(callback: types.CallbackQuery, callback_data: MenuCallBack, session: AsyncSession):
    
    if callback_data.menu_name == "add_to_cart":
        await add_to_cart(callback, callback_data, session)
        return
  

    media, reply_markup = await get_menu_content(
        session,
        level=callback_data.level,
        menu_name=callback_data.menu_name,
        category=callback_data.category,
        page = callback_data.page,
        user_id = callback.from_user.id,
        
    )

    

    await callback.message.edit_media(media=media, reply_markup=reply_markup)
    await callback.answer()



    





#-------------------------------------------------------------------------------- –ö–æ–º–∞–Ω–¥–∞ /start
# @user_privat_router.message(CommandStart())
# async def start_cmd(message : types.Message):
    
    
#     await message.answer("–ü—Ä–∏–≤—ñ—Ç, —è –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫",
#                          reply_markup=get_callback_btns(btns={
#                              '–ù–∞—Ç–∏—Å–Ω–∏ –º–µ–Ωe': 'some_1'
#                          }))
    
# @user_privat_router.callback_query(F.data.startswith('some_'))
# async def counter(callback: types.CallbackQuery):
#     number = int(callback.data.split('_')[-1])

#     await callback.message.edit_text(
#         text=f"–ù–∞—Ç–∏—Å–Ω—É—Ç–æ - {number}",
#         reply_markup=get_callback_btns(btns={
#                              '–î–æ–¥–∞—Ç–∏ 1 ':f'some_{number+1}',
#                              '–í—ñ–¥–Ω—è—Ç–∏ 1 ':f'some_{number-1}',
#                          }))

#--------------------------------------------------------------------------------
    
@user_privat_router.message(F.text.lower().contains('–ø–æ—á–∞—Ç'))
@user_privat_router.message(Command('go'))
async def begin_cmd(message : types.Message):
    await message.answer('–†–∞–¥—ñ –≤–∞—Å –≤—ñ—Ç–∞—Ç–∏', reply_markup=reply_custom.start_kb)     


@user_privat_router.message(
        or_f(
            Command('menu'), 
            (F.text.lower().contains('–º–µ–Ω—é')),
            (F.text.lower().contains('—Ñ—É–Ω–∫—Ü'))
            )
        )
async def menu_cmd(message : types.Message):
    await message.answer(f'{message.from_user.first_name}  –≤–∏ –≤–∏–∫–ª–∏–∫–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É –º–µ–Ω—é', reply_markup=reply.del_kbd)
    

@user_privat_router.message(F.text.lower().contains('–ø—Ä–æ –Ω–∞—Å'))
@user_privat_router.message(Command('about'))
async def about_cmd(message : types.Message):
    await message.answer('–ü—Ä–æ –Ω–∞—Å')

@user_privat_router.message(or_f((Command('payment')),
                                 (F.text.lower().contains('–∑–∞–ø–ª–∞—Ç')), 
                                 (F.text.lower().contains('–æ–ø–ª–∞—Ç')), 
                                 (F.text.lower() == '–æ–ø–ª–∞—Ç–∞'),
                                 )
                            )

async def payment_cmd(message : types.Message):
    text = as_marked_section(
        Bold('–í–∞—Ä—ñ–∞–Ω—Ç–∏ –æ–ø–ª–∞—Ç–∏ :\n'),
        '–ë–∞–Ω–∫—ñ–≤—Å—å–∫–∏–π —Ä–∞—Ö—É–Ω–æ–∫',
        '–ì–æ—Ç—ñ–≤–∫–∞',
        '–ö—Ä–µ–¥–∏—Ç–Ω–∞ –ö–∞—Ä—Ç–∫–∞',
        marker='‚úÖ'

        
    )
    await message.answer(text.as_html())
   

@user_privat_router.message(or_f((Command('shipping')),
                                 (F.text.lower().contains('–ø—Ä–∏–≤–µ–∑')),  
                                 (F.text.lower().contains('–¥–æ—Å—Ç–∞–≤')),
                                 (F.text.lower() == '–≤–∞—Ä—ñ–∞–Ω—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏'),
                                 )
                            ) # ----------------- contains - —à—É–∫–∞—î –∑–±—ñ–≥–∏ —É —Ç–µ–∫—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

async def filter_text_custom_contains(message : types.Message):
    text = as_list(
        as_marked_section(
            Bold('–í–∞—Ä—ñ–∞–Ω—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ :\n'),
            '–ù–∞—à —Ç—Ä–∞—Å–ø–æ—Ä—Ç',
            '–¢—Ä–∞—Å–ø–æ—Ä—Ç —Ç—Ä–µ—Ç—ñ—Ö –æ—Å—ñ–±',
            '–°–∞–º–æ–≤–∏–≤—ñ–∑',
        marker='‚úÖ'),
        as_marked_section(
            Bold('–î–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è :\n'),
            '–ù–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥—ñ',
            '–ù–∞ —Å–∫—É—Ç–µ—Ä—ñ',
            '–ù–∞ –≥–µ–ª—ñ–∫–æ–ø—Ç–µ—Ä—ñ',
        marker='üëâ'),
        sep='\n-------------------\n'
    )
    
    await message.answer(text.as_html())
         

@user_privat_router.message(F.text) #------------------------------------------ –¢–µ–∫—Å—Ç–æ–≤–∏–π —Ñ—ñ–ª—å—Ç—Ä —Ä–æ–∑—Ç–∞—à–æ–≤—É—î–º–æ –ø—ñ—Å–ª—è –≤—Å—ñ—Ö  –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π
async def filter_text_some(message : types.Message):

    await message.answer(f'–í—ñ—Ç–∞—î–º–æ.\n {message.from_user.first_name}\n –í–∞—à –∑–∞–ø–∏—Ç :\n "{message.text}"\n —â–µ –Ω–µ –∑—Ä–æ–∑—É–º—ñ–ª–∏–π –¥–ª—è –Ω–∞—à–æ—ó —Å–∏—Å—Ç–µ–º–∏ ')         

@user_privat_router.message(F.contact) #----------------------- –ª–æ–≤–∏–º–æ –∫–æ–Ω—Ç–∞–∫—Ç
async def get_contact(message: types.Message):
    await message.answer(f'–ö–æ–Ω—Ç–∞–∫—Ç –æ—Ç—Ä–∏–º–∞–Ω–æ :\n{str(message.contact)}')
    await message.answer(f' –Ω–æ–º–µ—Ä –æ—Ç—Ä–∏–º–∞–Ω–æ :\n{str(message.contact.phone_number)}')

@user_privat_router.message(F.location)#----------------------- –ª–æ–≤–∏–º–æ  –ª–æ–∫–∞—Ü—ñ—é
async def get_location(message: types.Message):
    await message.answer(f'–ª–æ–∫–∞—Ü—ñ—é –æ—Ç—Ä–∏–º–∞–Ω–æ {str(message.location)}')        


#--------------------------------------------------------------------------------------------   
    # await message.answer(f'–ü—Ä–∏–≤—ñ—Ç.  {message.from_user.first_name}.  –Ø –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫',
    #                      reply_markup=reply.start_kb_3.as_markup(
    #                          resize_keyboard=True,
    #                          input_field_placeholder='–©–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å'
    #                         )
    #                      )
#--------------------------------------------------------------------------------------------

# #---------------------------------------------------- –ï—Ö–æ —Ä–æ–∑—Ç–∞—à–æ–≤—É—î–º–æ –≤–∫—ñ–Ω—Ü—ñ
# @user_privat_router.message()
# async def echo(message : types.Message):
#     await message.answer(f' –≠—Ö–æ : {message.text}')



# @user_privat_router.message(F.photo) #------------------------------------------ –§–æ—Ç–æ —Ñ—ñ–ª—å—Ç—Ä
# async def filter_text(message : types.Message):
#     await message.answer(f' –í—ñ—Ç–∞—î–º–æ. {message.from_user.first_name}  –í–∏ –±–∞—á–µ—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ–±–æ—Ç–∏ –º–∞–≥—ñ—á–Ω–æ–≥–æ —Ñ—ñ–ª—å—Ç—Ä–∞ - photo -')



# @user_privat_router.message(F.text.lower() == '–≤–∞—Ä—ñ–∞–Ω—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏') #---------- Lower() - –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —É—Å—é —Å—Ç—Ä—ñ—á–∫—É  —É –Ω–∏–∂–Ω—ñ–π —Ä–µ–≥—ñ—Å—Ç—Ä
# async def filter_text_custom1(message : types.Message):
#     await message.answer(f' –í—ñ—Ç–∞—î–º–æ. {message.from_user.first_name} –∑ –ø—Ä–∏–≤–æ–¥—É –¥–æ—Å—Ç–∞–≤–∫–∏ –≤–∏ –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∑–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º {contact_shipping}') 


# @user_privat_router.message(Command('shipping'))
# async def shipping_cmd(message : types.Message):
#     await message.answer('–í–∞—Ä—ñ–∞–Ω—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏')
